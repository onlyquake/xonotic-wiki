h1. Repository Access

The repository is accessed using git.

h2. Linux/OS X:

First, you install git using your favorite package manager. Then:

<pre>
git clone git://git.xonotic.org/xonotic/xonotic.git
cd xonotic
./all update
</pre>

After that, you have a working checkout of the repository.

h3. Getting write access

A condition for write (push) access is that you agree that any code or data you push will be licensed under the General Public License, version 2, with or without the "or any later version" clause. In case the directory the changes apply to contains a LICENSE or COPYING file indicating another license, your pushed code has to be dual licensed appropriately. Subdirectories currently having a dual license:
* data/qcsrc/warpzonelib - dual licensed as "GPLv2 or later" or MIT license.

In case code you pushed was not written by you, it is your responsibility to ensure proper licensing.

To apply for write access, make an issue of type "Support" in the category "Repository" and attach your public SSH key to it.

To cleanly check out then, you would do:

<pre>
git clone ssh://xonotic@git.xonotic.org/xonotic.git
cd xonotic
./all update
</pre>

If you already have a checkout, you would do:

<pre>
git config remote.origin.url ssh://xonotic@git.xonotic.org/xonotic.git
./all update
</pre>

After that, you can write to the reposiotry using the usual git commands (commit, push).

h3. Working with the helper script "all"

To make working with the repo a little easier there's a little helper script (it's called all, as mentioned in above clone commands). It supports the following commands:

<pre>
./all update
</pre>

This command updates all the xonotic repositories.

<pre>
./all branch
</pre>

Lists the branches you are currrently on, in the respective repositories

<pre>
./all branches
</pre>

Lists all the branches known for all the respective repositories

<pre>
./all compile
</pre>

Compiles the game given that you have the required libs installed

<pre>
./all checkout
</pre>

h3. Further git information

About tracking remote branches:

http://www.gitready.com/beginner/2009/03/09/remote-tracking-branches.html

This wiki's [[Git]] page.

A tutorial for SVN users:

http://git-scm.org/course/svn.html

h2. Windows

Info for TortoiseGit / msysgit:

To get a GIT clone using mysysgit and Tortoise GIT, do the following:

- Go to the folder where you intend to clone, right click and choose Git Clone from the context menu. Clone the repository from git://git.xonotic.org/xonotic/xonotic.git and wait for everything to download.

- Once the first step is ready, open a command prompt or git bash and browse to the root folder of your clone. Write "./all update" as described above to get the separate data repos. After that you have a working GIT clone.

To write your own changes to the Xonotic git, do the following:

- You must first have a putty SSH key, containing your private key. To generate one use "puttygen":http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html which creates a ppk file. Choose SSH-2 RSA format and once the key has been generated save it as a private key.

- Make sure the public key is accepted on the GIT server (see getting access above). To find it, open the generated key in a text editor and read the "public-lines".

- Open the Settings menu of Tortoise GIT (right click anywhere in the folder you are setting this for) and go to Git -> Remote. Select "origin" for remote, "ssh://xonotic@git.xonotic.org/xonotic-data.pk3dir.git" for URL (data.pk3dir is the example for the "data" branch, each pk3dir is separate!) and for Putty Key browse and select the key file previously mentioned.

- In order to make a new branch, right click somewhere and choose Create Branch from the Tortoise GIT context menu. This will create a local branch you can do anything with. Once you locally committed your changes to your branch, select Push to upload or update the branch on the GIT server. From the Push window, choose your local branch for Local, leave Remote empty, and select origin for Destination.

NOTE 1: Before creating your local branch and committing to it, make sure you've configured your user settings from Settings -> Git - > Config (such as your name which will display in the logs).

NOTE 2: Try naming your branch myname/mychange for each patch. For instance, if your name is Alex and the change you are committing is a menu fix, use something like alex/menufix.
