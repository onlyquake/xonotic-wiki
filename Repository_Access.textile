h1. Repository Access

The repository is accessed using git.

h2. Linux/OS X:

First, you install git using your favorite package manager. Then:

<pre>
git clone git://git.xonotic.org/xonotic/xonotic.git
cd xonotic
./all update
</pre>

After that, you have a working checkout of the repository.

h3. Getting write access

A condition for write (push) access is that you agree that any code or data you push will be licensed under the General Public License, version 2, with or without the "or any later version" clause. In case the directory the changes apply to contains a LICENSE or COPYING file indicating another license, your pushed code has to be dual licensed appropriately. Subdirectories currently having a dual license:
* data/qcsrc/warpzonelib - dual licensed as "GPLv2 or later" or MIT license.

In case code you pushed was not written by you, it is your responsibility to ensure proper licensing.

To apply for write access, make an issue of type "Support" in the category "Repository" and attach your public SSH key to it.

To cleanly check out then, you would do:

<pre>
git clone ssh://xonotic@git.xonotic.org/xonotic.git
cd xonotic
./all update
</pre>

If you already have a checkout, you would do:

<pre>
git config remote.origin.url ssh://xonotic@git.xonotic.org/xonotic.git
./all update
</pre>

After that, you can write to the reposiotry using the usual git commands (commit, push).

h3. Working with the helper script "all"

TODO: Work on this to actually not be wrong!

To make working with the repo a little easier there's a little helper script (it's called all, as mentioned in above clone commands). It supports the following commands:

<pre>
./all update
./all branch
./all push
./all checkout
</pre>

The normal workflow for working on a contribution is the following:

h4. 1. Get up to date

<pre>./all update</pre>

This makes sure you are up to date. And should lessen the merging horror that might ensue when you try to push..

h4. 2. Create a branch

<pre>./all branch <your branch name here></pre>

Then work on your changes, commit locally, etc, until you are happy..

h4. 3. Push changes to the main repo

<pre>./all push</pre>

This asks you what to push, etc. Then if you want to get your changes from your branch into the master branch you will have to ask for someone with write access to merge your changes to master..


h4. 4. Go back to 1.


h2. Windows

TODO info for TortoiseGit
